# -*- coding: utf-8 -*-
from flask import current_app, abort
from flask_restful import Resource
from flask_restful.reqparse import RequestParser
from common import *
from flask import Flask, request, jsonify
import json, random, string
from random import choice
from common.ip_mapping import random_address_and_location
import os
import idna
from socket import socket
from OpenSSL import SSL
import OpenSSL
import re
from urllib import parse
import requests,json
class SitesResource(Resource):

    def __init__(self):
        self.parser = RequestParser()
        self.url_o = request.args.get("url")
    # 这里返回
    def get(self):
        print("SitesResource:get")
        # site = '48665gs' 
        # mock_data = os.path.join(os.path.dirname(__file__), 'mock_data/mock_data_'+site+'.json')
        # with open(mock_data) as f:
        #   data = json.load(f)
        rs = parse.urlparse(self.url_o)
        FILE_DIR = os.path.dirname(os.path.abspath(__file__))
        url = rs.netloc or rs.path
        file_path = FILE_DIR + "/crawler_result/" + url
        print(file_path)
        possible_json_file = file_path + "/" + "possible.json"
        try:
            with open(possible_json_file, 'r') as f:
                possible_json = json.load(f)
        except FileNotFoundError:
            data = {
                "screenshot": "",
                "ip": "1.1.1.1",
                "long": 120,
                "lat": 30,
                "address": "上海",
                "registrar": "123456",
                "registerTime": "123456",
                "redirect": ["12.12.12.12"],
                "type": "999",
                "peopleNum": 1,
                "certificate": {
                    "certType": "证书类型1",
                    "issuer": ["证书颁发者1"],
                    "certSerial": "999999",
                    "expireTime": "20141414"
                },
                "relatedSites": ["www.baidu.coim"],
                "relatedApp": False,
                "relatedAppIcon": {}
            }
            return jsonify(data)

        relevant_json_file = file_path + "/" + "relevantdomain.json"
        with open(relevant_json_file, 'r') as f:
            relevant_json = json.load(f)
        domain_type = relevant_json["seed_domain_type"]
        domain_type_list = ['未分类', '博彩', '贷款', '理财', '冒充', '直播间', '刷单']

        # possible_domains = []
        # possible_domains.extend(possible_json["domains_from_cert"][:5])
        # possible_domains.extend(possible_json["domains_from_dns"][:5])

        possible_domains = list(relevant_json["bad_domains"].keys())[:10]
        
        dns_ip = possible_json["ips_from_dns"][:4]
        ip = possible_json["ips_from_dns"][0]
        print(ip)
        response = requests.get('http://ip-api.com/json/'+ip)
        response = json.loads(response.text)
        if response['status'] == 'success':
            address = response['regionName']
            lat = response['lat']
            lon = response['lon']
        else:
            address = "Hong Kong"
            lat = 22.3964
            lon = 114.109

        # 拿证书
        sock = socket()
        sock.setblocking(1)
        hostname = url
        try:
            sock.connect((hostname, 443), )
        except TimeoutError:
            return ''
        ctx = SSL.Context(SSL.SSLv23_METHOD)
        ctx.check_hostname = False
        ctx.verify_mode = SSL.VERIFY_NONE
        sock_ssl = SSL.Connection(ctx, sock)
        sock_ssl.set_tlsext_host_name(idna.encode(hostname))
        sock_ssl.set_connect_state()
        for i in range(20):
            try:
                sock_ssl.do_handshake()
            except OpenSSL.SSL.WantReadError:
                print("SSL ERROR")
            else:
                break

        cert = sock_ssl.get_peer_certificate()
        # 颁发者名称
        issuer = cert.get_issuer().CN
        # 证书主体名称
        subject = cert.get_subject().CN
        # 算法
        algorithm = cert.get_signature_algorithm().decode('UTF-8')
        # 有效期
        validate_date = cert.get_notAfter().decode('UTF-8')
        start_date = cert.get_notBefore().decode('UTF-8')
        print(cert.get_pubkey().type())
        # 序列号
        serial = str(cert.get_serial_number())
        print(cert.get_serial_number())
        print(cert.get_version())

        start_date_parse = start_date[:4] + "-" + start_date[4:6] + "-" + start_date[6:8] + " " + start_date[8:10] + ":" + start_date[10:12] + ":" + start_date[12:14] 
        validate_date_parse = validate_date[:4] + "-" + validate_date[4:6] + "-" + validate_date[6:8] + " " + validate_date[8:10] + ":" + validate_date[10:12] + ":" + validate_date[12:14] 

        sock_ssl.close()
        sock.close()

        data = {
            "screenshot": "http://10.177.35.156/backend/resources/crawler/crawler_result/"+url+"/screenshot.png",
            "ip": ip,
            "long": lon,
            "lat": lat,
            "address": address,
            "registrar": subject,
            "registerTime": start_date_parse,
            "redirect": dns_ip,
            "type": domain_type_list[domain_type],
            "peopleNum": 4487692,
            "certificate": {
                "certType": "多域名证书",
                "issuer": issuer,
                "certSerial": serial,
                "expireTime": validate_date_parse
            },
            "relatedSites": possible_domains,
            "relatedApp": False,
            "relatedAppIcon": {}
        }
        print(data)
        return jsonify(data)

class AppResource(Resource):

    def __init__(self):
        self.parser = RequestParser()

    def get(self):
        app = 'dwe13kd'
        print("2233")
        mock_data = os.path.join(os.path.dirname(__file__), 'mock_data/mock_data_'+app+'.json')
        with open(mock_data) as f:
          data = json.load(f)
        return jsonify(data)

class CurrentResource(Resource):

    def __init__(self):
        self.parser = RequestParser()

    def get(self):
        status = random.randint(1, 10)
        address, long, lat = random_address_and_location()
        name = ''.join(random.sample('abcdefghijklmnopqrstuvwxyz',random.randint(5,8)))
        if status == 1:
            status_name = "ip"
            key = str(random.randint(1, 255)) + '.' + str(random.randint(1, 255)) + '.' + str(random.randint(1, 255)) + '.' + str(random.randint(1, 255))
        elif status == 2:
            status_name = "domain"
            key = 'https://' + str(random.randint(100, 100000)) + '.com:' + str(random.randint(100, 100000))
        elif status == 3:
            status_name = "registrar"
            key = ''.join(random.sample('abcdefghijklmnopqrstuvwxyz', random.randint(2, 4))) + '.com'
        elif status == 4:
            status_name = "type"
            key = ''.join(random.sample('abcdefghijklmnopqrstuvwxyz', random.randint(5, 12)))
        elif status == 5:
            status_name = "certType"
            key = ''.join(random.sample('ABCDEFGHIJKLMNOPQRSTUVWXYZ', random.randint(3, 5)))
        elif status == 6:
            status_name = "issuer"
            key = ''.join(random.sample('abcdefghijklmnopqrstuvwxyz', random.randint(5, 10)))
        elif status == 7:
            status_name = "subject"
            key = ''.join(random.sample('abcdefghijklmnopqrstuvwxyz', random.randint(5, 12))) + '.com'
        elif status == 8:
            status_name = "peopleNum"
            key = random.randint(1, 10000000)
        elif status == 9:
            status_name = "family"
            key = ''.join(random.sample('abcdefghijklmnopqrstuvwxyz', random.randint(5, 8)))
        else:
            status_name = "produceTime"
            key = '2020.7.30' + ' 14:19:36'
        dict = {
            "status": status,
            "long": long,
            "lat": lat,
            "name": name,
            status_name: key
        }
        return jsonify(dict)
